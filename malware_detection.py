import pefile 
import os.path
import tkinter as tk
from tkinter import *
from tkinter.filedialog import askopenfilename
import pandas as pd
import numpy as np
import keras
import hashlib 
from PIL import Image
from math import *




def get_api_list():
    API_list=[]
    file=pefile.PE(filepath)
    for entry in file.DIRECTORY_ENTRY_IMPORT:
        for API in entry.imports:
            API_list.append(API.name)
    API_list=[i.decode() for i in API_list]
    return API_list


def raw_pe_img_input():
	s=b''
	with open(filepath,"rb") as f:
		s=f.read()

	x=len(s)
	x=sqrt(x)
	x=floor(log(x,(2)))
	x=int(pow(2,x))

	img=Image.frombytes("L",(x,x),s)
	img.resize((32,32))    # Nearest neighbour interpolation

	input_data=list(img.getdata())
	input_data=np.array(input_data)
	input_data=np.resize(input_data,(1,1024))
	return input_data

def get_pe_section_header_info():
	global filepath

	file=pefile.PE(filepath)
	size_diff=0
	entropy=0
	
	section=file.sections[0]
	size_diff=int(section.Misc_VirtualSize-section.SizeOfRawData)
	entropy=section.get_entropy()

	input_data=[]
	input_data.append(size_diff)
	input_data.append(entropy)

	input_data=np.array(input_data)
	input_data=np.resize(input_data,(1,2))

	return input_data


def get_input():
    API_list=get_api_list()
    df=pd.read_csv("datasets/pe_imports.csv")            # preparing API call input
    cols=df.columns.tolist()[1:]
    col_dict={}
    for i in range(len(cols)):
        col_dict[cols[i].lower()]=i
    input_data=np.zeros((1,1000)).astype('int32')
    for API in API_list:
        if API in col_dict.keys():
            input_data[0][col_dict[API.lower()]]=1


    md5_list=list(df[0:])                               # md5 input
    class_list=list(df[-1:0])


    img_input=raw_pe_img_input()                         # raw pe image input

    pe_section_info=get_pe_section_header_info()
    return input_data,img_input,pe_section_info,md5_list,class_list


def checkMD5(md5_list,class_list):
	global filepath
	md5=""
	with open(filepath,"rb") as f:
		s=f.read()
		md5=hashlib.md5(s).hexdigest()
	for i in range(len(md5_list)):
		if md5 == md5_list[i]:
			return int(class_list[i])
	else:
		return 0


def CheckForMalware():
	global filepath
	global index

	filename=filepath.split("/")[-1]
	api_input_data,pe_img_input,pe_section_info,md5_list,class_list=get_input()
	val=checkMD5(md5_list,class_list)
	if val == 1:
		mylist.insert(index,"Md5 digest of uploaded "+filename+" matches with a malware \n File " + filename +  " is a malware")
		index+=1
		button1['state']=NORMAL
		button2['state']=DISABLED
		return

	
	x = api_calls_model.predict(input_data)

	if x<0.5:
		mylist.insert(index,"Uploaded " + filename + "  executable might not be malware!!")
	else:
		mylist.insert(index,"Uploaded " + filename + "  executable might be a malware!!")
	index+=1
	button1['state']=NORMAL
	button2['state']=DISABLED

def AskForExec():
  
    global filepath
    global index

    filepath=askopenfilename()
    text=""
    filename=filepath.split("/")[-1]
    if len(filepath) == 0 or filename.split(".")[1] != "exe":
        text="File {} is not an executable,try uploading again!!".format(filename)
    else:
        text="File {} uploaded successfully!".format(filename)
        button2['state']=NORMAL
        button1['state']=DISABLED
    mylist.insert(index,text)
    index+=1
    


def DeleteOutput():
	global mylist
	mylist.delete(0,END)

def main():
	global mylist
	global button1
	global button2
	global index
	global api_calls_model

	index=1

	m = tk.Tk()
	m.geometry("500x300") 
	m.title("Malware Analysis")

	api_calls_model = keras.models.load_model("models/model_1")

	frame=Frame(m)
	frame.pack()
	button1 = tk.Button(frame, text = "Upload Windows Executable", width = 30, command = AskForExec)
	button1.pack(side=TOP)
	button2=tk.Button(frame,text= "Check for Malware/Goodware",width=30,command=CheckForMalware)
	button2.pack(side=TOP)
	button2['state']=DISABLED
	mylist=Listbox(frame,width=80)
	mylist.pack(side=TOP)
	button3=tk.Button(frame,text="Clear output",width=30,command=DeleteOutput)
	button3.pack(side=TOP)
	m.mainloop()

if __name__=="__main__":
	main()

