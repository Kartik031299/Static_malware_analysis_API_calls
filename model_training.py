# -*- coding: utf-8 -*-
"""MA.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1ZjaaxecBa6hHarUwdYdtBMFnRO1Epibv
"""

#from google.colab import drive
#drive.mount('/content/drive')

import pandas as pd
import numpy as np
import tensorflow as tf

def load_data(test_set_split=0.1, dev_set_split = 0.08):
  data = pd.read_csv('dataset.csv')
  data = data.iloc[:, 1:]
  total_data = np.array(data)
  print(total_data.shape)

  np.random.shuffle(total_data)

  m = total_data.shape[0]
  train_start = 0
  train_end = int((1-test_set_split-dev_set_split)*m)
  dev_start = int((1-test_set_split-dev_set_split)*m)
  dev_end = int((1-test_set_split)*m)
  test_start = int((1-test_set_split)*m)
  test_end = m

  Y = total_data[:, -1]
  Y = Y.reshape((Y.shape[0], -1))
  X = total_data[:, :-1]

  X_train = X[train_start: train_end, :]
  Y_train = Y[train_start: train_end, :]

  X_dev = X[dev_start:dev_end, :]
  Y_dev = Y[dev_start:dev_end, :]

  X_test = X[test_start:test_end,:]
  Y_test = Y[test_start:test_end,:]


  # X_train = X_train.T
  # Y_train = Y_train.T

  # X_dev = X_dev.T
  # Y_dev = Y_dev.T

  # X_test = X_test.T
  # Y_test = Y_test.T

  # print("X_train:", X_train.shape)
  # print("Y_train:", Y_train.shape)
  # print("X_dev:", X_dev.shape)
  # print("Y_dev:", Y_dev.shape)
  # print("X_test:", X_test.shape)
  # print("Y_test:", Y_test.shape)

  return X_train, Y_train, X_dev, Y_dev, X_test, Y_test
X_train , Y_train, X_dev, Y_dev, X_test, Y_test = load_data(0.1, 0.1)

from keras.layers import Input, Dense
from keras.models import Model

def model(input_shape):
  X_input = Input(input_shape)
  X = Dense(128, activation='relu')(X_input)
  X = Dense(64, activation='relu')(X)
  X = Dense(32, activation='relu')(X)
  X = Dense(1, activation='sigmoid')(X)

  model = Model(inputs = X_input, outputs = X, name='JaiShreeRam')

  return model

print(X_train.shape)
model = model((X_train.shape[1],))
model.summary()
model.compile(optimizer='adam', loss='binary_crossentropy', metrics=['accuracy'])

model.fit(x=X_train, y=Y_train, epochs=100, batch_size=64)

preds = model.evaluate(x=X_test, y=Y_test)

print("loss: ", preds[0])
print("accuracy: ", preds[1])

model.save('first_fit_model')

#import keras
#loaded = keras.models.load_model('first_fit_model')
# loaded.summary()
#loaded.weights

