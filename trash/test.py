import tensorflow as tf
import pandas as pd
import tensorflow.keras.backend as K
x = tf.keras.models.load_model('image_model', compile=False)

def wbce( y_true, y_pred, weight1=0.2, weight0=0.8 ) :
    y_true = tf.cast(y_true, dtype = 'float32')
    y_pred = tf.cast(y_pred, dtype = 'float32')
    y_true = K.clip(y_true, K.epsilon(), 1-K.epsilon())
    y_pred = K.clip(y_pred, K.epsilon(), 1-K.epsilon())
    logloss = -(y_true * K.log(y_pred) * weight1 + (1 - y_true) * K.log(1 - y_pred) * weight0 )
    #print(logloss.shape)
    return K.mean(logloss)

x.compile(optimizer = 'adam' , loss = wbce)
df = pd.read_csv("malware_datasets/pe_section_headers_new.csv")
X_train = df.iloc[:, 1:-1]
Y_train = df.iloc[:, -1]
print(x.predict(X_train))
'''
import matplotlib.pyplot as plt
import pandas as pd

df = pd.read_csv("malware_datasets/pe_section_headers_new.csv")

X = df.iloc[:, 1:-1]
Y = df.iloc[:, -1]

cols = []

for x in Y:
  if x == 1:
    cols.append('green')
  else:
    cols.append('red')


plt.scatter(X['sizediff'], X['entropy'], alpha=0.2,
             c=cols, cmap='viridis')

plt.xlabel('size_dif')
plt.ylabel('entropy')
plt.show()

'''
