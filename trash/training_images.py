import tensorflow as tf
import pandas as pd
import tensorflow.keras.backend as K

df = pd.read_csv("malware_datasets/raw_pe_images.csv")


X_train = df.iloc[:, 1:-1]
Y_train = df.iloc[:, -1]

print(f"input shape: {X_train.shape}")
print(f"output shape: {Y_train.shape}")

weights = [0.9, 0.1]
'''def weighted_binary_crossentropy(zero_weight = 0.8, one_weight=0.1):
    def myloss(y_true, y_pred):
        b_ce = tf.keras.losses.binary_crossentropy(tf_y_true, tf_y_pred)
        weight_vector = tf_y_true * one_weight + (1.0 - tf_y_true)*zero_weight
        weighted_b_ce = weight_vector * b_ce
        return tf.keras.backend.mean(weighted_b_ce)
'''

def wbce( y_true, y_pred, weight1=0.01, weight0=0.99 ) :
    y_true = tf.cast(y_true, dtype = 'float32')
    y_pred = tf.cast(y_pred, dtype = 'float32')
    y_true = K.clip(y_true, K.epsilon(), 1-K.epsilon())
    y_pred = K.clip(y_pred, K.epsilon(), 1-K.epsilon())
    logloss = -(y_true * K.log(y_pred) * weight1 + (1 - y_true) * K.log(1 - y_pred) * weight0 )
    #print(logloss.shape)
    return K.mean(logloss) 

X_input= tf.keras.layers.Input((X_train.shape[1],))
#X = tf.keras.layers.Dense(64, activation = tf.nn.relu)(X_input)
#X = tf.keras.layers.Dense(256, activation = tf.nn.relu)(X)
#X = tf.keras.layers.Dense(64, activation = tf.nn.relu)(X)
X = tf.keras.layers.Dense(1, activation = tf.nn.sigmoid)(X_input)

model = tf.keras.models.Model(X_input, X)
model.summary()
model.compile(optimizer = 'adam', loss = wbce, metrics = ['accuracy'])

history = model.fit(X_train, Y_train, epochs = 10, batch_size = 64, validation_split = 0.2, validation_batch_size=64, shuffle = True)



model.save('image_model')
